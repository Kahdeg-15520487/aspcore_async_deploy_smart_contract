using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Contracts;
using Nethereum.Hex.HexTypes;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Web3;
using Nethereum.Web3.Accounts.Managed;

namespace BECInterface.Contracts
{

    public class CertificationRegistryContract
    {
        public const string abi = "[{\"constant\":false,\"inputs\":[{\"name\":\"_GlobalAdmin\",\"type\":\"address\"}],\"name\":\"changeGlobalAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CertID\",\"type\":\"string\"}],\"name\":\"delOrganizationCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"CertificateAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"CertAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CertID\",\"type\":\"string\"},{\"name\":\"_organizationID\",\"type\":\"bytes32\"}],\"name\":\"delIndividualCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CertAdmin\",\"type\":\"address\"}],\"name\":\"delRosenCertAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CertAdmin\",\"type\":\"address\"}],\"name\":\"addRosenCertAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CertAdmin\",\"type\":\"address\"},{\"name\":\"_organizationID\",\"type\":\"bytes32\"}],\"name\":\"addCertAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_CertID\",\"type\":\"string\"},{\"name\":\"_organizationID\",\"type\":\"bytes32\"}],\"name\":\"getCertAddressByID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CertAdmin\",\"type\":\"address\"},{\"name\":\"_organizationID\",\"type\":\"bytes32\"}],\"name\":\"delCertAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CertID\",\"type\":\"string\"},{\"name\":\"b0\",\"type\":\"bytes32\"},{\"name\":\"b1\",\"type\":\"bytes32\"},{\"name\":\"_organizationID\",\"type\":\"bytes32\"}],\"name\":\"setIndividualCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CertID\",\"type\":\"string\"},{\"name\":\"b0\",\"type\":\"bytes32\"},{\"name\":\"b1\",\"type\":\"bytes32\"},{\"name\":\"_organizationID\",\"type\":\"bytes32\"}],\"name\":\"updateIndividualCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_CompanyName\",\"type\":\"string\"},{\"name\":\"_Norm\",\"type\":\"string\"},{\"name\":\"_CertID\",\"type\":\"string\"},{\"name\":\"_issued\",\"type\":\"uint256\"},{\"name\":\"_expires\",\"type\":\"uint256\"},{\"name\":\"_Scope\",\"type\":\"string\"},{\"name\":\"_issuingBody\",\"type\":\"string\"}],\"name\":\"setCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GlobalAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"RosenCertificateAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_CertID\",\"type\":\"string\"}],\"name\":\"getOrganizationalCertAddressByID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"RosenCertAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_certID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_certAdrress\",\"type\":\"address\"}],\"name\":\"CertificationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_certID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_certAdrress\",\"type\":\"address\"}],\"name\":\"IndividualCertificationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_certID\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_certAdrress\",\"type\":\"address\"}],\"name\":\"CertificationDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_certAdmin\",\"type\":\"address\"}],\"name\":\"CertAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_certAdmin\",\"type\":\"address\"}],\"name\":\"CertAdminDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_globalAdmin\",\"type\":\"address\"}],\"name\":\"GlobalAdminChanged\",\"type\":\"event\"}]";

        public const string bytecode = "0x608060405234801561001057600080fd5b5033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612f0a806100616000396000f30060806040526004361062000103576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630226ed4814620001085780630ba92878146200014e5780631a7389d614620001ba57806320f80a65146200023c578063232c6bab14620002a857806323483e4514620003225780632af7ecc7146200036857806365efd3a314620003ae57806365f77c63146200040257806374b5545a14620004bc5780637dccd4d61462000510578063996b8b7614620005a65780639e4a613f146200063c578063a614d54e14620007d4578063b5624526146200082e578063be048d0414620008a2578063c9a6811a146200094e575b600080fd5b3480156200011557600080fd5b506200014c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620009ac565b005b3480156200015b57600080fd5b50620001b8600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505062000ab0565b005b348015620001c757600080fd5b50620001fa6004803603810190808035600019169060200190929190803560001916906020019092919050505062000d21565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200024957600080fd5b506200028e6004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062000d63565b604051808215151515815260200191505060405180910390f35b348015620002b557600080fd5b5062000320600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560001916906020019092919050505062000d92565b005b3480156200032f57600080fd5b5062000366600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620010bc565b005b3480156200037557600080fd5b50620003ac600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620011ce565b005b348015620003bb57600080fd5b5062000400600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600019169060200190929190505050620012e9565b005b3480156200040f57600080fd5b506200047a600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080356000191690602001909291905050506200141e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620004c957600080fd5b506200050e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560001916906020019092919050505062001486565b005b3480156200051d57600080fd5b50620005a4600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560001916906020019092919080356000191690602001909291908035600019169060200190929190505050620015b2565b005b348015620005b357600080fd5b506200063a600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080356000191690602001909291908035600019169060200190929190803560001916906020019092919050505062001825565b005b3480156200064957600080fd5b50620007d2600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505062001b1e565b005b348015620007e157600080fd5b50620007ec62001f2c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200083b57600080fd5b5062000860600480360381019080803560001916906020019092919050505062001f52565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015620008af57600080fd5b506200090c600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505062001f85565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156200095b57600080fd5b5062000992600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001fd4565b604051808215151515815260200191505060405180910390f35b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151562000a0957600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f01998ad4b0cc08b3e190adcb94d72b69479b3f817ea6a2b1fd960ce176610fd981604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151562000b0b57600080fd5b62000b168262001ff4565b905060016000826000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663afa936b86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801562000bb857600080fd5b505af115801562000bcd573d6000803e3d6000fd5b505050507fd3595dec7c51a76054a222cd6805bb86e35b5f4b1963b9f7eb73beade34426c58260016000846000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101562000ca357808201518184015260208101905062000c86565b50505050905090810190601f16801562000cd15780820380516001836020036101000a031916815260200191505b50935050505060405180910390a160016000826000191660001916815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050565b60006020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008160026000826000191660001916815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168062000e505750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151562000e5c57600080fd5b62000e678462001ff4565b915060008084600019166000191681526020019081526020016000206000836000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663afa936b86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15801562000f2157600080fd5b505af115801562000f36573d6000803e3d6000fd5b505050507fd3595dec7c51a76054a222cd6805bb86e35b5f4b1963b9f7eb73beade34426c58460008086600019166000191681526020019081526020016000206000856000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156200102457808201518184015260208101905062001007565b50505050905090810190601f168015620010525780820380516001836020036101000a031916815260200191505b50935050505060405180910390a160008084600019166000191681526020019081526020016000206000836000191660001916815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200111957600080fd5b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690557fd5c7aece2cb58986279bb01fed2a4436ffe2a84c3c057995bf317f9030a7dac381604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200122b57600080fd5b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fa4a1a78d5a7a475cc16cdf30cd440485cce5817d6c693dfd725dee060070f89a81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156200134657600080fd5b600160026000836000191660001916815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fa4a1a78d5a7a475cc16cdf30cd440485cce5817d6c693dfd725dee060070f89a82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b600080600083600019166000191681526020019081526020016000206000620014478562001ff4565b6000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515620014e357600080fd5b60026000826000191660001916815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690557fd5c7aece2cb58986279bb01fed2a4436ffe2a84c3c057995bf317f9030a7dac382604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b6000808260026000826000191660001916815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680620016715750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15156200167d57600080fd5b620016888762001ff4565b925085856200169662002111565b808360001916600019168152602001826000191660001916815260200192505050604051809103906000f080158015620016d4573d6000803e3d6000fd5b5091508160008086600019166000191681526020019081526020016000206000856000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f445a1483f7d06e6fa0a450661ca0f9bdc3c841d6775d604e0ea8e5198e3b6e92878360405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015620017e0578082015181840152602081019050620017c3565b50505050905090810190601f1680156200180e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150505050505050565b60008160026000826000191660001916815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680620018e35750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515620018ef57600080fd5b620018fa8662001ff4565b915060008084600019166000191681526020019081526020016000206000836000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f72285986866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808360001916600019168152602001826000191660001916815260200192505050600060405180830381600087803b158015620019d757600080fd5b505af1158015620019ec573d6000803e3d6000fd5b505050507f445a1483f7d06e6fa0a450661ca0f9bdc3c841d6775d604e0ea8e5198e3b6e928660008086600019166000191681526020019081526020016000206000856000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101562001ada57808201518184015260208101905062001abd565b50505050905090810190601f16801562001b085780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050505050565b600080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151562001b7a57600080fd5b62001b858762001ff4565b91508888888888888862001b9862002122565b80806020018060200180602001888152602001878152602001806020018060200186810386528d818151815260200191508051906020019080838360005b8381101562001bf357808201518184015260208101905062001bd6565b50505050905090810190601f16801562001c215780820380516001836020036101000a031916815260200191505b5086810385528c818151815260200191508051906020019080838360005b8381101562001c5c57808201518184015260208101905062001c3f565b50505050905090810190601f16801562001c8a5780820380516001836020036101000a031916815260200191505b5086810384528b818151815260200191508051906020019080838360005b8381101562001cc557808201518184015260208101905062001ca8565b50505050905090810190601f16801562001cf35780820380516001836020036101000a031916815260200191505b50868103835288818151815260200191508051906020019080838360005b8381101562001d2e57808201518184015260208101905062001d11565b50505050905090810190601f16801562001d5c5780820380516001836020036101000a031916815260200191505b50868103825287818151815260200191508051906020019080838360005b8381101562001d9757808201518184015260208101905062001d7a565b50505050905090810190601f16801562001dc55780820380516001836020036101000a031916815260200191505b509c50505050505050505050505050604051809103906000f08015801562001df1573d6000803e3d6000fd5b5090508060016000846000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f8fbf148d28be481e097c657015bb6b0208186e51c02513de60d0efa2255ea2a7878260405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101562001ee557808201518184015260208101905062001ec8565b50505050905090810190601f16801562001f135780820380516001836020036101000a031916815260200191505b50935050505060405180910390a1505050505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001600062001f968462001ff4565b6000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60036020528060005260406000206000915054906101000a900460ff1681565b60006002826040516020018082805190602001908083835b6020831015156200203357805182526020820191506020810190506020830392506200200c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156200209e578051825260208201915060208101905060208303925062002077565b6001836020036101000a0380198251168184511680821785525050505050509050019150506020604051808303816000865af1158015620020e3573d6000803e3d6000fd5b5050506040513d6020811015620020f957600080fd5b81019080805190602001909291905050509050919050565b604051610394806200213483390190565b604051610a1780620024c8833901905600608060405234801561001057600080fd5b506040516040806103948339810180604052810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160018160001916905550806002816000191690555050506102f0806100a46000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632b92b8e5146100675780635f722859146100a9578063afa936b8146100e8578063ed9aab51146100ff575b600080fd5b34801561007357600080fd5b5061007c610156565b60405180836000191660001916815260200182600019166000191681526020019250505060405180910390f35b3480156100b557600080fd5b506100e660048036038101908080356000191690602001909291908035600019169060200190929190505050610167565b005b3480156100f457600080fd5b506100fd61022b565b005b34801561010b57600080fd5b5061011461029f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600080600154600254915091509091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101c257600080fd5b816001816000191690555080600281600019169055507f7a844e6aae238bcd98e7b13e2c45a101fcb726169853cc02211686360697f9e2828260405180836000191660001916815260200182600019166000191681526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561028657600080fd5b3273ffffffffffffffffffffffffffffffffffffffff16ff5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820640f4644f8e5b59fa631ef69103ce632a79ee1126f708ac9a5b260f66051c24f0029608060405234801561001057600080fd5b50604051610a17380380610a1783398101806040528101908080518201929190602001805182019291906020018051820192919060200180519060200190929190805190602001909291908051820192919060200180518201929190505050828410151561007d57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600190805190602001906100d392919061014a565b5085600290805190602001906100ea92919061014a565b50846003908051906020019061010192919061014a565b508360048190555082600581905550816006908051906020019061012692919061014a565b50806007908051906020019061013d92919061014a565b50505050505050506101ef565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018b57805160ff19168380011785556101b9565b828001600101855582156101b9579182015b828111156101b857825182559160200191906001019061019d565b5b5090506101c691906101ca565b5090565b6101ec91905b808211156101e85760008160009055506001016101d0565b5090565b90565b610819806101fe6000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063218fd1c41461009e57806331e8c7ba1461012e5780633eb1eb1a146101be5780635f1ff5491461024e578063a2240eb014610279578063afa936b814610309578063b1cb0db314610320578063ed9aab511461034b578063f82ec3e6146103a2575b600080fd5b3480156100aa57600080fd5b506100b3610432565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f35780820151818401526020810190506100d8565b50505050905090810190601f1680156101205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013a57600080fd5b506101436104d0565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610183578082015181840152602081019050610168565b50505050905090810190601f1680156101b05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ca57600080fd5b506101d361056e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102135780820151818401526020810190506101f8565b50505050905090810190601f1680156102405780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025a57600080fd5b5061026361060c565b6040518082815260200191505060405180910390f35b34801561028557600080fd5b5061028e610612565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102ce5780820151818401526020810190506102b3565b50505050905090810190601f1680156102fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561031557600080fd5b5061031e6106b0565b005b34801561032c57600080fd5b50610335610724565b6040518082815260200191505060405180910390f35b34801561035757600080fd5b5061036061072a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103ae57600080fd5b506103b761074f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103f75780820151818401526020810190506103dc565b50505050905090810190601f1680156104245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104c85780601f1061049d576101008083540402835291602001916104c8565b820191906000526020600020905b8154815290600101906020018083116104ab57829003601f168201915b505050505081565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105665780601f1061053b57610100808354040283529160200191610566565b820191906000526020600020905b81548152906001019060200180831161054957829003601f168201915b505050505081565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106045780601f106105d957610100808354040283529160200191610604565b820191906000526020600020905b8154815290600101906020018083116105e757829003601f168201915b505050505081565b60045481565b60068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106a85780601f1061067d576101008083540402835291602001916106a8565b820191906000526020600020905b81548152906001019060200180831161068b57829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561070b57600080fd5b3273ffffffffffffffffffffffffffffffffffffffff16ff5b60055481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107e55780601f106107ba576101008083540402835291602001916107e5565b820191906000526020600020905b8154815290600101906020018083116107c857829003601f168201915b5050505050815600a165627a7a72305820d61192c535faeb844a82504dd7738d266f0e9c05b2c3450a6dc2424850d130000029a165627a7a723058207709ea6bf8639714a40f6d186708e7e5f29e689491173df74e34efb3e91e417b0029";

        private readonly string contractAddress;

        private readonly Web3 web3;

        private readonly ManagedAccount certAdminAccount;

        private readonly Contract contract;

        private const uint defaultGasLimit = 300000;

        /// <summary>
        /// constructor
        /// </summary>
        /// <param name="_web3Conn">web3 connection</param>
        /// <param name="_certAdminAccount">account</param>
        /// <param name="_contractAddress">master contract address</param>
        public CertificationRegistryContract(
            Web3 _web3Conn,
            ManagedAccount _certAdminAccount,
            string _contractAddress)
        {
            web3 = _web3Conn;

            certAdminAccount = _certAdminAccount;

            contractAddress = _contractAddress;

            contract = web3.Eth.GetContract(abi, _contractAddress);

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="_web3Connn"></param>
        /// <param name="_contractAddress"></param>
        public CertificationRegistryContract(
            Web3 _web3Connn,
            string _contractAddress)
        {
            web3 = _web3Connn;

            contract = web3.Eth.GetContract(abi, _contractAddress);
        }

        /// <summary>
        /// set a organizaional cert
        /// </summary>
        /// <param name="companyName"></param>
        /// <param name="norm"></param>
        /// <param name="certId"></param>
        /// <param name="issuedDate"></param>
        /// <param name="expireDate"></param>
        /// <param name="scope"></param>
        /// <param name="issuingBody"></param>
        /// <param name="gasPrice"></param>
        /// <returns></returns>
        public Task<string> SetCertificate(
            string companyName,
            string norm,
            string certId,
            uint issuedDate,
            uint expireDate,
            string scope,
            string issuingBody,
            uint gasPrice
        )
        {
            var thisFunction = contract.GetFunction("setCertificate");
            var deployTask = thisFunction.SendTransactionAsync(
                certAdminAccount.Address,
                new HexBigInteger(defaultGasLimit),
                new HexBigInteger(gasPrice),
                null,
                new object[] { companyName, norm, certId, issuedDate, expireDate, scope, issuingBody });
            return deployTask;
        }

        /// <summary>
        /// set an individual cert
        /// </summary>
        /// <param name="certId">cert's id</param>
        /// <param name="hashValue">64 bytes of the cert's hash</param>
        /// <param name="organizationId"></param>
        /// <param name="gasPrice"></param>
        /// <returns>Transaction Id</returns>
        public Task<string> SetIndividualCertificate(
            string certId,
            byte[] hashValue,
            string organizationId, // should contain maximum 32 characters
            uint gasPrice)
        {
            if (hashValue.Length != 64)
            {
                //exception about hash being too long
            }

            if (organizationId.Length > 32)
            {
                throw new Exception("Invalid length of byte32 inputs");
            }

            byte[] firstBytes32 = new byte[32];
            byte[] lastBytes32 = new byte[32];
            Array.Copy(hashValue, firstBytes32, 32);
            Array.Copy(hashValue, 32, lastBytes32, 0, 32);

            var thisFunction = contract.GetFunction("setIndividualCertificate");
            var deployTask = thisFunction.SendTransactionAsync(
                certAdminAccount.Address,
                new HexBigInteger(defaultGasLimit),
                new HexBigInteger(gasPrice),
                null,
                new object[] { certId, firstBytes32, lastBytes32, organizationId });
            return deployTask;
        }

        /// <summary>
        /// update an individual cert
        /// </summary>
        /// <param name="certId">cert's id</param>
        /// <param name="hashValue">64 bytes of the cert's hash</param>
        /// <param name="organizationId"></param>
        /// <param name="gasPrice"></param>
        /// <returns></returns>
        public Task<string> UpdateIndividualCertificate(
            string certId,
            byte[] hashValue,
            string organizationId, // should contain maximum 32 characters
            uint gasPrice)
        {
            if (organizationId.Length > 32)
            {
                throw new Exception("Invalid length of byte32 inputs");
            }

            byte[] firstBytes32 = new byte[32];
            byte[] lastBytes32 = new byte[32];
            Array.Copy(hashValue, firstBytes32, 32);
            Array.Copy(hashValue, 32, lastBytes32, 0, 32);

            var thisFunction = contract.GetFunction("updateIndividualCertificate");
            var deployTask = thisFunction.SendTransactionAsync(
                certAdminAccount.Address,
                new HexBigInteger(defaultGasLimit),
                new HexBigInteger(gasPrice),
                null,
                new object[] { certId, firstBytes32, lastBytes32, organizationId });
            return deployTask;
        }

        /// <summary>
        /// add a cert admin
        /// </summary>
        /// <param name="address">cert admin's address</param>
        /// <param name="organizationId"></param>
        /// <returns></returns>
        public Task<string> AddCertAdmin(
            string address,
            string organizationId
        )
        {
            if (organizationId.Length > 32)
            {
                throw new Exception("Invalid length of byte32 inputs");
            }
            var thisFunction = contract.GetFunction("addCertAdmin");
            var addCertAdminTask = thisFunction.SendTransactionAsync(
                certAdminAccount.Address,
                new HexBigInteger(defaultGasLimit),
                null,
                new object[] { address, organizationId });
            return addCertAdminTask;

        }
        /// <summary>
        /// add a rosen cert admin
        /// </summary>
        /// <param name="address"></param>
        /// <param name="organizationId"></param>
        /// <returns></returns>
        public Task<string> AddRosenCertAdmin(
            string address,
            string organizationId
        )
        {
            if (organizationId.Length > 32)
            {
                throw new Exception("Invalid length of byte32 inputs");
            }
            var thisFunction = contract.GetFunction("addRosenCertAdmin");
            var addCertAdminTask = thisFunction.SendTransactionAsync(
                certAdminAccount.Address,
                new HexBigInteger(defaultGasLimit),
                null,
                new object[] { address, organizationId });
            return addCertAdminTask;
        }
        /// <summary>
        /// delete a cert admin
        /// </summary>
        /// <param name="address"></param>
        /// <returns></returns>
        public Task<string> DelCertAdmin(
            string address
        )
        {
            var thisFunction = contract.GetFunction("delCertAdmin");
            var delAdminTask = thisFunction.SendTransactionAsync(
                certAdminAccount.Address,
                new HexBigInteger(defaultGasLimit),
                null,
                new object[] { address });
            return delAdminTask;

        }
        /// <summary>
        /// delete a rosen cert admin
        /// </summary>
        /// <param name="address"></param>
        /// <returns></returns>
        public Task<string> DelRosenCertAdmin(
            string address
        )
        {
            var thisFunction = contract.GetFunction("delRosenCertAdmin");
            var delAdminTask = thisFunction.SendTransactionAsync(
                certAdminAccount.Address,
                new HexBigInteger(defaultGasLimit),
                null,
                new object[] { address });
            return delAdminTask;

        }

        /// <summary>
        /// get a cert address by its id
        /// </summary>
        /// <param name="_certID"></param>
        /// <param name="organizationId"></param>
        /// <returns></returns>
        public Task<string> GetCertAddressById(
            string _certID,
            string organizationId
        )
        {
            var thisFunction = contract.GetFunction("getCertAddressByID");
            return thisFunction.CallAsync<string>(_certID, organizationId);
        }

        /// <summary>
        /// async get a cert address by its id
        /// </summary>
        /// <param name="certID"></param>
        /// <param name="organizationId"></param>
        /// <returns></returns>
        public async Task<string> GetCertAddressByIdAsync(
            string certID,
            string organizationId
        )
        {
            var thisFunction = contract.GetFunction("getCertAddressByID");
            return await thisFunction.CallAsync<string>(certID, organizationId);

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="_certID"></param>
        /// <returns></returns>
        public Task<string> GetOrganizationalCertAddressByID(
            string _certID
        )
        {
            var thisFunction = contract.GetFunction("getOrganizationalCertAddressByID");
            return thisFunction.CallAsync<string>(_certID);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="_certID"></param>
        /// <returns></returns>
        public async Task<string> GetOrganizationalCertAddressByIDAsync(
            string _certID
        )
        {
            var thisFunction = contract.GetFunction("getOrganizationalCertAddressByID");
            return await thisFunction.CallAsync<string>(_certID);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="organizationId"></param>
        /// <param name="_certID"></param>
        /// <returns></returns>
        public async Task<string> GetCertificateAddressByOrgIdAndCertIdAsync(
            string organizationId,
            string _certID
        )
        {
            var thisFunction = contract.GetFunction("CertificateAddresses");
            var getCertKeyFunc = contract.GetFunction("getCertKey");
            var shaCertKey = await getCertKeyFunc.CallAsync<string>(_certID);
            return await thisFunction.CallAsync<string>(organizationId, shaCertKey);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="_certID"></param>
        /// <returns></returns>
        public async Task<string> GetRosenCertificateAddressByCertIdAsync(
            string _certID
        )
        {
            var thisFunction = contract.GetFunction("RosenCertificateAddresses");
            var getCertKeyFunc = contract.GetFunction("getCertKey");
            var shaCertKey = await getCertKeyFunc.CallAsync<string>(_certID);
            return await thisFunction.CallAsync<string>(shaCertKey);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="organizationId"></param>
        /// <param name="address"></param>
        /// <returns></returns>
        public async Task<bool> CheckCertAdminByOrgIdAndAddressAsync(
            string organizationId,
            string address
        )
        {
            if (!address.StartsWith("0x"))
            {
                throw new Exception("Invalid function input");
            }
            var thisFunction = contract.GetFunction("CertAdmins");
            return await thisFunction.CallAsync<bool>(organizationId, address);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="_certID"></param>
        /// <returns></returns>
        public async Task<bool> CheckRosenCertAdminByAddressAsync(
            string _certID
        )
        {
            var thisFunction = contract.GetFunction("RosenCertAdmins");
            return await thisFunction.CallAsync<bool>(_certID);
        }

        /// <summary>
        /// GetCertificationSetEvent
        /// </summary>
        /// <returns>a list of event</returns>
        public async Task<IEnumerable<IndividualCertificationSet>> GetCertificationSetEvent(BlockParameter fromBlock = null)
        {
            var thisEvent = contract.GetEvent<IndividualCertificationSet>("IndividualCertificationSet");
            var filterBlockNumber = await thisEvent.CreateFilterAsync(fromBlock);
            var allEvents = await thisEvent.GetFilterChanges(filterBlockNumber);
            return allEvents.Select(el => el.Event);
        }
    }

    [Event("IndividualCertificationSet")]
    public class IndividualCertificationSet : IEventDTO
    {
        [Parameter("string", "_certID", 1, true)]
        public string CertId { get; set; }

        [Parameter("address", "_certAdrress", 2, true)]
        public string CertAddress { get; set; }
    }
}
